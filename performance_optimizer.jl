# =======================================================================


#!/usr/bin/env julia
# TELJES√çTM√âNY-OPTIMALIZ√ÅL√ì MODUL
# JIT bemeleg√≠t√©s, workspace kezel√©s, vektoriz√°ci√≥, cache optimaliz√°l√°s

module PerformanceOptimizer

using LinearAlgebra, StaticArrays, SIMD, LoopVectorization
using Base.Threads, ThreadsX, Tullio, StructArrays
using PrecompileTools, LoggingExtras, JSON3
using Random, Dates, SHA, FileIO

export JITWarmer, WorkspaceManager, OptimizedOperations
export initialize_performance_system, warmup_hot_paths
export optimized_distance_matrix, memory_efficient_attention_v2
export precompute_lookups, setup_threading

# ============================================================================
# 1. JIT-BEMELEG√çT≈ê MODUL
# ============================================================================

struct JITWarmer
    dummy_configs::Vector{Any}
    warmup_sizes::Vector{Tuple{Int,Int,Int}}  # (batch, seq_len, dim)
end

function JITWarmer()
    # Reprezentat√≠v dummy konfigur√°ci√≥k
    configs = [
        (batch=1, seq_len=128, dim=128, heads=8),
        (batch=2, seq_len=256, dim=256, heads=12),
        (batch=4, seq_len=512, dim=512, heads=16),
    ]

    sizes = [(c.batch, c.seq_len, c.dim) for c in configs]
    JITWarmer(configs, sizes)
end

function warmup_hot_paths(warmer::JITWarmer, alphafold_model)
    println("üî• JIT bemeleg√≠t√©s ind√≠t√°sa...")

    @inbounds for (i, config) in enumerate(warmer.dummy_configs)
        println("  Bemeleg√≠t√©s $(i)/$(length(warmer.dummy_configs)): batch=$(config.batch)")

        # Dummy input gener√°l√°s
        batch, seq_len, dim = config.batch, config.seq_len, config.dim
        heads = config.heads

        dummy_input = rand(Float32, batch, seq_len, dim)
        dummy_msa = rand(Float32, batch, 64, seq_len, dim)
        dummy_pair = rand(Float32, batch, seq_len, seq_len, dim)
        dummy_mask = rand(Bool, batch, seq_len)

        # Hot-path f√ºggv√©nyek bemeleg√≠t√©se
        try
            # AlphaFold3 f≈ë forward
            GC.@preserve dummy_input dummy_msa dummy_pair begin
                @views alphafold_model(dummy_input[1:batch, 1:seq_len, 1:dim])
            end

            # MSAModule bemeleg√≠t√©s
            msa_module = alphafold_model.msa_module
            GC.@preserve dummy_msa dummy_pair dummy_mask begin
                @views msa_module(dummy_msa[1:batch, :, 1:seq_len, 1:dim],
                                 dummy_pair[1:batch, 1:seq_len, 1:seq_len, 1:dim],
                                 dummy_mask[1:batch, 1:seq_len])
            end

            # PairformerStack bemeleg√≠t√©s
            pairformer = alphafold_model.pairformer
            GC.@preserve dummy_pair dummy_mask begin
                @views pairformer(dummy_pair[1:batch, 1:seq_len, 1:seq_len, 1:dim],
                                 dummy_mask[1:batch, 1:seq_len])
            end

            # DiffusionModule bemeleg√≠t√©s
            diffusion = alphafold_model.diffusion
            dummy_t = rand(Float32, batch, 1)
            GC.@preserve dummy_input dummy_t dummy_mask begin
                @views diffusion(dummy_input[1:batch, 1:seq_len, 1:dim],
                               dummy_t[1:batch, :],
                               dummy_mask[1:batch, 1:seq_len])
            end

        catch e
            println("    Figyelmeztet√©s bemeleg√≠t√©skor: $e")
        end

        GC.gc()  # Mem√≥ria tiszt√≠t√°s
    end

    println("‚úÖ JIT bemeleg√≠t√©s befejezve")
end

# ============================================================================
# 2. MUNKATER√úLET-KEZEL≈ê MODUL
# ============================================================================

mutable struct WorkspaceManager
    # El≈ëreallok√°lt m√°trixok/bufferek
    distance_matrices::Dict{Tuple{Int,Int}, Matrix{Float32}}
    attention_scores::Dict{Tuple{Int,Int,Int,Int}, Array{Float32,4}}
    attention_values::Dict{Tuple{Int,Int,Int,Int}, Array{Float32,4}}
    batched_mul_buffers::Dict{Tuple{Int,Int,Int}, Array{Float32,3}}
    distogram_buffers::Dict{Tuple{Int,Int}, Matrix{Float32}}

    # Bit-reprezent√°ci√≥s maszkok
    bit_masks::Dict{Tuple{Int,Int}, BitMatrix}
    compressed_masks::Dict{String, Vector{UInt64}}

    # RNG pipeline
    thread_rngs::Vector{Random.MersenneTwister}
    noise_tensors::Dict{Tuple{Int,Int,Int}, Array{Float32,3}}

    # RMSD munkater√ºletek
    rmsd_workspaces::Vector{Matrix{Float32}}

    # I/O cache
    file_cache::Dict{UInt64, Any}
    cache_dir::String

    lock::ReentrantLock
end

function WorkspaceManager()
    cache_dir = ".performance_cache"
    mkpath(cache_dir)

    # Per-thread RNG inicializ√°l√°s
    thread_rngs = [Random.MersenneTwister(1337 + i) for i in 1:nthreads()]

    WorkspaceManager(
        Dict{Tuple{Int,Int}, Matrix{Float32}}(),
        Dict{Tuple{Int,Int,Int,Int}, Array{Float32,4}}(),
        Dict{Tuple{Int,Int,Int,Int}, Array{Float32,4}}(),
        Dict{Tuple{Int,Int,Int}, Array{Float32,3}}(),
        Dict{Tuple{Int,Int}, Matrix{Float32}}(),
        Dict{Tuple{Int,Int}, BitMatrix}(),
        Dict{String, Vector{UInt64}}(),
        thread_rngs,
        Dict{Tuple{Int,Int,Int}, Array{Float32,3}}(),
        [zeros(Float32, 1000, 3) for _ in 1:nthreads()],
        Dict{UInt64, Any}(),
        cache_dir,
        ReentrantLock()
    )
end

function get_or_allocate!(workspace::WorkspaceManager, ::Type{Matrix{Float32}}, dims::Tuple{Int,Int})
    key = dims
    lock(workspace.lock) do
        if !haskey(workspace.distance_matrices, key)
            workspace.distance_matrices[key] = zeros(Float32, dims...)
        end
        workspace.distance_matrices[key]
    end
end

function get_or_allocate!(workspace::WorkspaceManager, ::Type{Array{Float32,4}}, dims::Tuple{Int,Int,Int,Int}, buffer_type::Symbol)
    key = dims
    dict = buffer_type == :scores ? workspace.attention_scores : workspace.attention_values
    lock(workspace.lock) do
        if !haskey(dict, key)
            dict[key] = zeros(Float32, dims...)
        end
        dict[key]
    end
end

function get_or_allocate!(workspace::WorkspaceManager, ::Type{BitMatrix}, dims::Tuple{Int,Int})
    key = dims
    lock(workspace.lock) do
        if !haskey(workspace.bit_masks, key)
            workspace.bit_masks[key] = falses(dims...)
        end
        workspace.bit_masks[key]
    end
end

function get_thread_rng(workspace::WorkspaceManager)
    tid = threadid()
    workspace.thread_rngs[tid]
end

function get_cached_result(workspace::WorkspaceManager, key_data::Any)
    hash_key = hash(key_data)
    cache_path = joinpath(workspace.cache_dir, "$(hash_key).jld2")

    if isfile(cache_path)
        try
            return FileIO.load(cache_path, "data")
        catch
            rm(cache_path, force=true)
        end
    end
    return nothing
end

function cache_result!(workspace::WorkspaceManager, key_data::Any, result::Any)
    hash_key = hash(key_data)
    cache_path = joinpath(workspace.cache_dir, "$(hash_key).jld2")

    try
        FileIO.save(cache_path, "data", result)
    catch e
        println("Cache ment√©s sikertelen: $e")
    end
end

# ============================================================================
# 3. OPTIMALIZ√ÅLT OPER√ÅCI√ìK
# ============================================================================

struct OptimizedOperations
    workspace::WorkspaceManager
    precomputed_lookups::Dict{String, Any}
    blas_threads::Int
end

function OptimizedOperations(workspace::WorkspaceManager)
    # BLAS sz√°lak be√°ll√≠t√°sa
    optimal_blas_threads = min(4, nthreads())
    LinearAlgebra.BLAS.set_num_threads(optimal_blas_threads)

    OptimizedOperations(workspace, Dict{String, Any}(), optimal_blas_threads)
end

# Optimaliz√°lt t√°vols√°gm√°trix @turbo-val
function optimized_distance_matrix(ops::OptimizedOperations, coords::AbstractMatrix{T},
                                 mask::Union{AbstractMatrix{Bool}, Nothing}=nothing) where T<:AbstractFloat
    n_atoms = size(coords, 1)
    result = get_or_allocate!(ops.workspace, Matrix{Float32}, (n_atoms, n_atoms))

    @turbo for i in 1:n_atoms
        for j in 1:n_atoms
            if i != j
                diff_x = coords[i, 1] - coords[j, 1]
                diff_y = coords[i, 2] - coords[j, 2]
                diff_z = coords[i, 3] - coords[j, 3]
                dist_sq = diff_x*diff_x + diff_y*diff_y + diff_z*diff_z
                result[i, j] = sqrt(dist_sq)
            else
                result[i, j] = 0.0f0
            end
        end
    end

    # Maszkol√°s alkalmaz√°sa
    if !isnothing(mask)
        @turbo for i in 1:n_atoms
            for j in 1:n_atoms
                if !mask[i, j]
                    result[i, j] = 0.0f0
                end
            end
        end
    end

    return result
end

# Mem√≥riahat√©kony attention 64-es csemp√©kkel
function memory_efficient_attention_v2(ops::OptimizedOperations,
                                      q::AbstractArray{T,4}, k::AbstractArray{T,4}, v::AbstractArray{T,4},
                                      mask=nothing; bias=nothing, scale_factor=1.0f0) where T<:AbstractFloat
    batch_size, num_heads, seq_len, dim_head = size(q)
    chunk_size = 64  # Fix csemp√©z√©s

    # El≈ëallok√°lt bufferek
    output = get_or_allocate!(ops.workspace, Array{Float32,4}, size(q), :values)
    scores_buffer = get_or_allocate!(ops.workspace, Array{Float32,4},
                                   (batch_size, num_heads, chunk_size, seq_len), :scores)

    scale = scale_factor / sqrt(Float32(dim_head))

    @inbounds for chunk_start in 1:chunk_size:seq_len
        chunk_end = min(chunk_start + chunk_size - 1, seq_len)
        chunk_len = chunk_end - chunk_start + 1

        # Q chunk kiv√°g√°s
        @views q_chunk = q[:, :, chunk_start:chunk_end, :]

        # Attention scores sz√°m√≠t√°s Tullio-val
        @tullio scores[b, h, i, j] := q_chunk[b, h, i, d] * k[b, h, j, d] * scale threads=true

        # Bias √©s maszk alkalmaz√°s
        if !isnothing(bias)
            @views @turbo scores .+= bias[:, :, chunk_start:chunk_end, :]
        end

        if !isnothing(mask)
            mask_value = typemin(Float32) / 2
            @views @turbo for b in 1:batch_size, h in 1:num_heads, i in 1:chunk_len, j in 1:seq_len
                if !mask[b, h, chunk_start+i-1, j]
                    scores[b, h, i, j] = mask_value
                end
            end
        end

        # In-place softmax
        @tullio exp_scores[b, h, i, j] := exp(scores[b, h, i, j] - maximum(scores[b, h, i, :])) threads=true
        @tullio sum_exp[b, h, i] := exp_scores[b, h, i, j] threads=true
        @tullio attn_weights[b, h, i, j] := exp_scores[b, h, i, j] / sum_exp[b, h, i] threads=true

        # Output sz√°m√≠t√°s
        @tullio output[:, :, chunk_start:chunk_end, :] = attn_weights[b, h, i, j] * v[b, h, j, d] threads=true
    end

    return output
end

# Alloc-free RMSD √∫jrafelhaszn√°lhat√≥ munkater√ºlettel
function optimized_rmsd(ops::OptimizedOperations, coords1::AbstractMatrix, coords2::AbstractMatrix)
    tid = threadid()
    workspace_matrix = ops.workspace.rmsd_workspaces[tid]

    n_atoms = size(coords1, 1)
    if size(workspace_matrix, 1) < n_atoms
        resize!(workspace_matrix, n_atoms, 3)
    end

    # In-place k√ºl√∂nbs√©g sz√°m√≠t√°s
    @views diff_matrix = workspace_matrix[1:n_atoms, :]
    @turbo for i in 1:n_atoms
        for j in 1:3
            diff_matrix[i, j] = coords1[i, j] - coords2[i, j]
        end
    end

    # RMSD sz√°m√≠t√°s
    @tullio sum_sq := diff_matrix[i, j] * diff_matrix[i, j] threads=true
    return sqrt(sum_sq / n_atoms)
end

# Maszk-tudatos softmax allok√°ci√≥mentesen
function mask_aware_softmax!(ops::OptimizedOperations, x::AbstractArray, mask::AbstractArray, dim::Int)
    mask_value = typemin(eltype(x)) / 2

    # Maszkol√°s
    @turbo for idx in eachindex(x, mask)
        if !mask[idx]
            x[idx] = mask_value
        end
    end

    # In-place softmax minden slice-ra
    if dim == ndims(x)
        @tullio max_val[indices...] := maximum(x[indices..., :]) threads=true
        @tullio x[indices..., j] = exp(x[indices..., j] - max_val[indices...]) threads=true
        @tullio sum_exp[indices...] := sum(x[indices..., :]) threads=true
        @tullio x[indices..., j] = x[indices..., j] / sum_exp[indices...] threads=true
    end

    return x
end

# Precompute lookups p√°rhuzamos felt√∂lt√©ssel
function precompute_lookups(ops::OptimizedOperations, coords::AbstractMatrix)
    println("üîç Lookup t√°bl√°k el≈ësz√°m√≠t√°sa...")

    # T√°vols√°g lookup p√°rhuzamos felt√∂lt√©s
    n_atoms = size(coords, 1)
    chunk_size = max(1, n_atoms √∑ nthreads())

    # Per-thread lok√°lis dictionary-k
    thread_dicts = [Dict{Tuple{Int,Int}, Float32}() for _ in 1:nthreads()]

    @threads for tid in 1:nthreads()
        start_idx = (tid - 1) * chunk_size + 1
        end_idx = min(tid * chunk_size, n_atoms)
        local_dict = thread_dicts[tid]

        @inbounds for i in start_idx:end_idx
            for j in 1:n_atoms
                if i != j
                    diff_x = coords[i, 1] - coords[j, 1]
                    diff_y = coords[i, 2] - coords[j, 2]
                    diff_z = coords[i, 3] - coords[j, 3]
                    dist = sqrt(diff_x*diff_x + diff_y*diff_y + diff_z*diff_z)
                    local_dict[(i, j)] = Float32(dist)
                end
            end
        end
    end

    # Lock-free merge
    merged_dict = Dict{Tuple{Int,Int}, Float32}()
    for local_dict in thread_dicts
        merge!(merged_dict, local_dict)
    end

    ops.precomputed_lookups["distances"] = merged_dict
    println("‚úÖ $(length(merged_dict)) t√°vols√°g el≈ësz√°m√≠tva")
end

# StructArrays-alap√∫ Atom t√°rol√°s
struct OptimizedAtom
    id::Int32
    x::Float32
    y::Float32
    z::Float32
    type_id::Int8
    charge::Float32
    b_factor::Float32
end

function create_atom_storage(atoms_data::Vector)
    return StructArray{OptimizedAtom}(atoms_data)
end

# BitMatrix maszk kompresszi√≥
function compress_mask(ops::OptimizedOperations, mask::BitMatrix)
    key = string(hash(mask))

    if haskey(ops.workspace.compressed_masks, key)
        return ops.workspace.compressed_masks[key]
    end

    # Run-length encoding bit szinten
    compressed = UInt64[]
    current_run = UInt64(0)
    run_length = 0
    current_bit = false

    for bit in mask
        if bit != current_bit || run_length >= 63
            push!(compressed, (UInt64(current_bit) << 63) | UInt64(run_length))
            current_bit = bit
            run_length = 1
        else
            run_length += 1
        end
    end

    # Utols√≥ run
    push!(compressed, (UInt64(current_bit) << 63) | UInt64(run_length))

    ops.workspace.compressed_masks[key] = compressed
    return compressed
end

# Pufferelt JSON I/O
mutable struct BufferedJSON
    buffer::IOBuffer

    BufferedJSON() = new(IOBuffer())
end

function read_json_buffered(json_io::BufferedJSON, data::String)
    seekstart(json_io.buffer)
    write(json_io.buffer, data)
    seekstart(json_io.buffer)
    return JSON3.read(json_io.buffer)
end

function write_json_buffered(json_io::BufferedJSON, obj)
    seekstart(json_io.buffer)
    JSON3.write(json_io.buffer, obj)
    String(take!(json_io.buffer))
end

# ============================================================================
# 4. INICIALIZ√ÅL√ì F√úGGV√âNYEK
# ============================================================================

function initialize_performance_system()
    println("‚ö° Teljes√≠tm√©ny-optimaliz√°l√≥ rendszer inicializ√°l√°sa...")

    # Threading setup
    println("  Sz√°lak: $(nthreads()) worker + 1 main")
    LinearAlgebra.BLAS.set_num_threads(min(4, nthreads()))
    println("  BLAS sz√°lak: $(LinearAlgebra.BLAS.get_num_threads())")

    # Workspace manager
    workspace = WorkspaceManager()
    ops = OptimizedOperations(workspace)

    # Logging optimaliz√°l√°s
    global_logger(EarlyFilteredLogger(global_logger()) do log
        log.level >= Logging.Warn  # Csak warning+ a hot path sor√°n
    end)

    println("‚úÖ Teljes√≠tm√©ny-optimaliz√°l√≥ rendszer k√©sz")
    return ops
end

function setup_precompilation()
    @compile_workload begin
        # F≈ë t√≠puskombin√°ci√≥k precompile-ja
        dummy_matrix = rand(Float32, 100, 100)
        dummy_coords = rand(Float32, 50, 3)
        dummy_mask = rand(Bool, 100, 100)

        ops = initialize_performance_system()

        # Precompile hot paths
        optimized_distance_matrix(ops, dummy_coords)
        optimized_rmsd(ops, dummy_coords, dummy_coords .+ 0.1f0)
        compress_mask(ops, BitMatrix(dummy_mask))

        # Attention precompile
        q = rand(Float32, 2, 8, 64, 32)
        k = rand(Float32, 2, 8, 64, 32)
        v = rand(Float32, 2, 8, 64, 32)
        memory_efficient_attention_v2(ops, q, k, v)

        println("Precompilation befejezve")
    end
end

# ============================================================================
# 5. EXPORTOK √âS GLOB√ÅLIS V√ÅLTOZ√ìK
# ============================================================================

# Glob√°lis workspace instance
const GLOBAL_WORKSPACE = Ref{Union{OptimizedOperations, Nothing}}(nothing)

function get_global_workspace()
    if GLOBAL_WORKSPACE[] === nothing
        GLOBAL_WORKSPACE[] = initialize_performance_system()
    end
    return GLOBAL_WORKSPACE[]
end

# Precompile setup
setup_precompilation()

end # module PerformanceOptimizer


# =======================================================================


# =======================================================================
